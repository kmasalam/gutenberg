// These margins make sure that nested blocks stack/overlay with the parent block chrome
// This is sort of an experiment at making sure the editor looks as much like the end result as possible
// Potentially the rules here can apply to all nested blocks and enable stacking, in which case it should be moved elsewhere
// When using CSS grid, margins do not collapse on the container.
.wp-block-columns .block-editor-block-list__layout {
	// This max-width is used to constrain the main editor column, it should not cascade into columns
	.block-editor-block-list__block {
		max-width: none;
	}
}

.wp-block-columns {
	display: block;

	> .block-editor-inner-blocks > .block-editor-block-list__layout {
		display: flex;
		flex-wrap: wrap;
		margin-bottom: $default-block-margin;

		@include break-medium() {
			flex-wrap: nowrap;
		}

		@supports (display: grid) {
			--columns-template: 1fr;
			display: grid;
			grid-gap: $grid-size-large * 2;
			@include break-medium() {
				grid-template-columns: var(--columns-template);
			}
		}

		> [data-type="core/column"] {
			@include break-medium() {
				+ [data-type="core/column"] {
					margin-left: $grid-size-large * 2;

					@supports (display: grid) {
						margin-left: 0;
					}
				}
			}
		}

		// Set full heights on Columns to enable vertical alignment preview
		> [data-type="core/column"],
		> [data-type="core/column"] > .block-editor-block-list__block-edit,
		> [data-type="core/column"] > .block-editor-block-list__block-edit > div[data-block],
		> [data-type="core/column"] > .block-editor-block-list__block-edit .block-core-columns {
			display: flex;
			flex-direction: column;

			// This flex rule fixes an issue in IE11.
			flex: 1 1 auto;

			// IE11 does not support `position: sticky`, so we use it here to serve correct Flex rules to modern browsers.
			@supports (position: sticky) {
				flex: 1;
			}
		}

		// Adjust the individual column block.
		> [data-type="core/column"] {
			// Prevent long unbroken words from overflowing.
			word-break: break-word; // For back-compat.
			overflow-wrap: break-word; // New standard.
		}
	}
}

/**
 * Columns act as as a "passthrough container"
 * and therefore has its vertical margins/padding removed via negative margins
 * therefore we need to compensate for this here by doubling the spacing on the
 * vertical to ensure there is equal visual spacing around the inserter. Note there
 * is no formal API for a "passthrough" Block so this is an edge case overide
 */
[data-type="core/columns"] {

	.block-list-appender {
		margin-top: $block-padding*2;
		margin-bottom: $block-padding*2;
	}
}

/**
 * Vertical Alignment Preview
 * note: specificity is important here to ensure individual
 * * columns alignment is prioritised over parent column alignment
 *
 */
.are-vertically-aligned-top .block-core-columns,
div.block-core-columns.is-vertically-aligned-top {
	justify-content: flex-start;
}

.are-vertically-aligned-center .block-core-columns,
div.block-core-columns.is-vertically-aligned-center {
	justify-content: center;
}

.are-vertically-aligned-bottom .block-core-columns,
div.block-core-columns.is-vertically-aligned-bottom {
	justify-content: flex-end;
}

/**
 * Fixes single Column breadcrumb position.
 */
[data-type="core/column"] > .block-editor-block-list__block-edit > .editor-block-list__breadcrumb {
	left: -$block-left-border-width;
}

/**
 * Make single Column overlay not extend past boundaries of parent
 */
.block-core-columns > .block-editor-inner-blocks.has-overlay::after {
	left: 0;
	right: 0;
}

// Fullwide: show margin left/right to ensure there's room for the side UI.
// This is not a 1:1 preview with the front-end where these margins would presumably be zero.
[data-type="core/columns"][data-align="full"] .wp-block-columns {
	padding-left: $block-padding;
	padding-right: $block-padding;

	@include break-small() {
		padding-left: $block-container-side-padding;
		padding-right: $block-container-side-padding;
	}
}
